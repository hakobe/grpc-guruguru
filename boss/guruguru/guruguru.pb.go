// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guruguru.proto

/*
Package guruguru is a generated protocol buffer package.

It is generated from these files:
	guruguru.proto

It has these top-level messages:
	JoinRequest
	Res
	Next
	Task
*/
package guruguru

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JoinRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostPort string `protobuf:"bytes,2,opt,name=host_port,json=hostPort" json:"host_port,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinRequest) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

type Res struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Res) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Next struct {
	NextName     string `protobuf:"bytes,1,opt,name=next_name,json=nextName" json:"next_name,omitempty"`
	NextHostPort string `protobuf:"bytes,2,opt,name=next_host_port,json=nextHostPort" json:"next_host_port,omitempty"`
}

func (m *Next) Reset()                    { *m = Next{} }
func (m *Next) String() string            { return proto.CompactTextString(m) }
func (*Next) ProtoMessage()               {}
func (*Next) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Next) GetNextName() string {
	if m != nil {
		return m.NextName
	}
	return ""
}

func (m *Next) GetNextHostPort() string {
	if m != nil {
		return m.NextHostPort
	}
	return ""
}

type Task struct {
	FromName string `protobuf:"bytes,1,opt,name=from_name,json=fromName" json:"from_name,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func init() {
	proto.RegisterType((*JoinRequest)(nil), "JoinRequest")
	proto.RegisterType((*Res)(nil), "Res")
	proto.RegisterType((*Next)(nil), "Next")
	proto.RegisterType((*Task)(nil), "Task")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Boss service

type BossClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Res, error)
}

type bossClient struct {
	cc *grpc.ClientConn
}

func NewBossClient(cc *grpc.ClientConn) BossClient {
	return &bossClient{cc}
}

func (c *bossClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/Boss/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Boss service

type BossServer interface {
	Join(context.Context, *JoinRequest) (*Res, error)
}

func RegisterBossServer(s *grpc.Server, srv BossServer) {
	s.RegisterService(&_Boss_serviceDesc, srv)
}

func _Boss_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Boss/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Boss_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Boss",
	HandlerType: (*BossServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Boss_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guruguru.proto",
}

// Client API for Worker service

type WorkerClient interface {
	SetNext(ctx context.Context, in *Next, opts ...grpc.CallOption) (*Res, error)
	AcceptTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Res, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) SetNext(ctx context.Context, in *Next, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/Worker/SetNext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) AcceptTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := grpc.Invoke(ctx, "/Worker/AcceptTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Worker service

type WorkerServer interface {
	SetNext(context.Context, *Next) (*Res, error)
	AcceptTask(context.Context, *Task) (*Res, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_SetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Next)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/SetNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SetNext(ctx, req.(*Next))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_AcceptTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AcceptTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Worker/AcceptTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AcceptTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetNext",
			Handler:    _Worker_SetNext_Handler,
		},
		{
			MethodName: "AcceptTask",
			Handler:    _Worker_AcceptTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guruguru.proto",
}

func init() { proto.RegisterFile("guruguru.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xe9, 0x9a, 0xd6, 0xed, 0x58, 0xf6, 0x30, 0xa0, 0xd4, 0x7a, 0x91, 0xe8, 0xc1, 0x53,
	0x0e, 0xf5, 0x28, 0x08, 0x7a, 0x52, 0x0f, 0x45, 0xa2, 0xe0, 0xb1, 0xd4, 0x32, 0xfe, 0x21, 0x74,
	0x67, 0x4d, 0x66, 0x61, 0x3f, 0xbe, 0x4c, 0x16, 0x61, 0xed, 0x21, 0x4c, 0x78, 0x2f, 0xf3, 0x9b,
	0xbc, 0x81, 0xea, 0xb3, 0x8d, 0xad, 0x1e, 0xd7, 0x44, 0x16, 0xb6, 0xb7, 0x70, 0xf4, 0xc4, 0xdf,
	0xb5, 0xa7, 0x9f, 0x96, 0x92, 0x20, 0x82, 0xa9, 0x37, 0x3b, 0x9a, 0x8f, 0xce, 0x47, 0x57, 0x53,
	0x9f, 0xef, 0x78, 0x06, 0xd3, 0x2f, 0x4e, 0xb2, 0x6e, 0x38, 0xca, 0xbc, 0xc8, 0x46, 0xa9, 0xc2,
	0x33, 0x47, 0xb1, 0xc7, 0x70, 0xe0, 0x29, 0x61, 0x05, 0x05, 0x87, 0xdc, 0x55, 0xfa, 0x82, 0x83,
	0x7d, 0x04, 0xb3, 0xa2, 0x4e, 0xb4, 0xb7, 0xa6, 0x4e, 0xd6, 0x03, 0x68, 0xa9, 0xc2, 0x4a, 0xc1,
	0x97, 0x50, 0x65, 0x73, 0x9f, 0x3e, 0x53, 0xf5, 0xe1, 0x6f, 0xc2, 0x05, 0x98, 0xd7, 0x4d, 0x0a,
	0x8a, 0xfa, 0x88, 0xbc, 0xfb, 0x87, 0x52, 0x41, 0x51, 0x4b, 0x0b, 0xe6, 0x9e, 0x53, 0xc2, 0x05,
	0x18, 0x8d, 0x83, 0x33, 0x37, 0x48, 0xb5, 0x30, 0xce, 0x53, 0x5a, 0xde, 0xc0, 0xe4, 0x8d, 0x63,
	0xa0, 0x88, 0x27, 0x70, 0xf8, 0x42, 0x92, 0x3f, 0x38, 0x76, 0x5a, 0xfa, 0x17, 0x78, 0x0a, 0x70,
	0xb7, 0xdd, 0x52, 0x23, 0x79, 0xe0, 0xd8, 0x69, 0xe9, 0xad, 0xf7, 0x49, 0x5e, 0xd7, 0xf5, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xe4, 0x6b, 0x9a, 0x40, 0x01, 0x00, 0x00,
}
