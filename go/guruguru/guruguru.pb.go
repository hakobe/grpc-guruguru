// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guruguru.proto

/*
Package guruguru is a generated protocol buffer package.

It is generated from these files:
	guruguru.proto

It has these top-level messages:
	Member
	JoinRequest
	JoinResponse
	PokeRequest
	PokeResponse
	SetNextRequest
	SetNextResponse
*/
package guruguru

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Member struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostPort string `protobuf:"bytes,2,opt,name=host_port,json=hostPort" json:"host_port,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Member) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Member) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

type JoinRequest struct {
	Member *Member `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
}

func (m *JoinRequest) Reset()                    { *m = JoinRequest{} }
func (m *JoinRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()               {}
func (*JoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoinRequest) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type JoinResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *JoinResponse) Reset()                    { *m = JoinResponse{} }
func (m *JoinResponse) String() string            { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()               {}
func (*JoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoinResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type PokeRequest struct {
	From    *Member `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *PokeRequest) Reset()                    { *m = PokeRequest{} }
func (m *PokeRequest) String() string            { return proto.CompactTextString(m) }
func (*PokeRequest) ProtoMessage()               {}
func (*PokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PokeRequest) GetFrom() *Member {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PokeRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PokeResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *PokeResponse) Reset()                    { *m = PokeResponse{} }
func (m *PokeResponse) String() string            { return proto.CompactTextString(m) }
func (*PokeResponse) ProtoMessage()               {}
func (*PokeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PokeResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SetNextRequest struct {
	Member *Member `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
}

func (m *SetNextRequest) Reset()                    { *m = SetNextRequest{} }
func (m *SetNextRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNextRequest) ProtoMessage()               {}
func (*SetNextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetNextRequest) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type SetNextResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *SetNextResponse) Reset()                    { *m = SetNextResponse{} }
func (m *SetNextResponse) String() string            { return proto.CompactTextString(m) }
func (*SetNextResponse) ProtoMessage()               {}
func (*SetNextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetNextResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Member)(nil), "Member")
	proto.RegisterType((*JoinRequest)(nil), "JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "JoinResponse")
	proto.RegisterType((*PokeRequest)(nil), "PokeRequest")
	proto.RegisterType((*PokeResponse)(nil), "PokeResponse")
	proto.RegisterType((*SetNextRequest)(nil), "SetNextRequest")
	proto.RegisterType((*SetNextResponse)(nil), "SetNextResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BossService service

type BossServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
}

type bossServiceClient struct {
	cc *grpc.ClientConn
}

func NewBossServiceClient(cc *grpc.ClientConn) BossServiceClient {
	return &bossServiceClient{cc}
}

func (c *bossServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/BossService/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BossService service

type BossServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
}

func RegisterBossServiceServer(s *grpc.Server, srv BossServiceServer) {
	s.RegisterService(&_BossService_serviceDesc, srv)
}

func _BossService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BossService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BossService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BossService",
	HandlerType: (*BossServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _BossService_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guruguru.proto",
}

// Client API for MemberService service

type MemberServiceClient interface {
	Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error)
	SetNext(ctx context.Context, in *SetNextRequest, opts ...grpc.CallOption) (*SetNextResponse, error)
}

type memberServiceClient struct {
	cc *grpc.ClientConn
}

func NewMemberServiceClient(cc *grpc.ClientConn) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Poke(ctx context.Context, in *PokeRequest, opts ...grpc.CallOption) (*PokeResponse, error) {
	out := new(PokeResponse)
	err := grpc.Invoke(ctx, "/MemberService/Poke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SetNext(ctx context.Context, in *SetNextRequest, opts ...grpc.CallOption) (*SetNextResponse, error) {
	out := new(SetNextResponse)
	err := grpc.Invoke(ctx, "/MemberService/SetNext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberService service

type MemberServiceServer interface {
	Poke(context.Context, *PokeRequest) (*PokeResponse, error)
	SetNext(context.Context, *SetNextRequest) (*SetNextResponse, error)
}

func RegisterMemberServiceServer(s *grpc.Server, srv MemberServiceServer) {
	s.RegisterService(&_MemberService_serviceDesc, srv)
}

func _MemberService_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Poke(ctx, req.(*PokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SetNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SetNext(ctx, req.(*SetNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poke",
			Handler:    _MemberService_Poke_Handler,
		},
		{
			MethodName: "SetNext",
			Handler:    _MemberService_SetNext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guruguru.proto",
}

func init() { proto.RegisterFile("guruguru.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x69, 0x09, 0x49, 0x3b, 0xf9, 0x53, 0x99, 0x53, 0x48, 0xc1, 0x3f, 0xf1, 0xe2, 0x41,
	0x16, 0x8c, 0x27, 0xaf, 0xe2, 0x49, 0x50, 0x4a, 0xfa, 0x01, 0xa4, 0x91, 0xb1, 0x96, 0xb0, 0x99,
	0xb8, 0xbb, 0x11, 0x3f, 0xbe, 0xec, 0x26, 0x95, 0xb4, 0x28, 0x78, 0x08, 0x64, 0x67, 0x67, 0x7e,
	0xef, 0xbd, 0x59, 0x48, 0xb6, 0x9d, 0xea, 0xec, 0x27, 0x5a, 0xc5, 0x86, 0xf3, 0x3b, 0xf0, 0x9f,
	0x48, 0x56, 0xa4, 0x10, 0xc1, 0x6b, 0x36, 0x92, 0xd2, 0xc9, 0xf9, 0xe4, 0x6a, 0x5e, 0xba, 0x7f,
	0x5c, 0xc2, 0xfc, 0x9d, 0xb5, 0x79, 0x69, 0x59, 0x99, 0x74, 0xea, 0x2e, 0x66, 0xb6, 0xb0, 0x62,
	0x65, 0x72, 0x01, 0xe1, 0x23, 0xef, 0x9a, 0x92, 0x3e, 0x3a, 0xd2, 0x06, 0xcf, 0xc0, 0x97, 0x8e,
	0xe4, 0x08, 0x61, 0x11, 0x88, 0x1e, 0x5c, 0x0e, 0xe5, 0xfc, 0x14, 0xa2, 0xbe, 0x5f, 0xb7, 0xdc,
	0x68, 0xc2, 0x04, 0xa6, 0x5c, 0xbb, 0xe6, 0x59, 0x39, 0xe5, 0x3a, 0x7f, 0x80, 0x70, 0xc5, 0x35,
	0xed, 0x79, 0x4b, 0xf0, 0xde, 0x14, 0xcb, 0x63, 0x9a, 0x2b, 0x62, 0x0a, 0x81, 0x24, 0xad, 0x37,
	0x5b, 0x1a, 0x6c, 0xed, 0x8f, 0x56, 0xa5, 0xa7, 0xfc, 0xa1, 0x72, 0x03, 0xc9, 0x9a, 0xcc, 0x33,
	0x7d, 0x99, 0x7f, 0x1b, 0xbf, 0x80, 0xc5, 0xcf, 0xc8, 0xef, 0xd4, 0xa2, 0x80, 0xf0, 0x9e, 0xb5,
	0x5e, 0x93, 0xfa, 0xdc, 0xbd, 0x12, 0x5e, 0x82, 0x67, 0xa3, 0x62, 0x24, 0x46, 0x1b, 0xca, 0x62,
	0x31, 0xce, 0x5f, 0x54, 0x10, 0xf7, 0x42, 0xa3, 0x29, 0x6b, 0x1d, 0x23, 0x31, 0xda, 0x43, 0x16,
	0x8b, 0x83, 0x3c, 0xd7, 0x10, 0x0c, 0x66, 0x70, 0x21, 0x0e, 0x93, 0x64, 0x27, 0xe2, 0xc8, 0x67,
	0xe5, 0xbb, 0x57, 0xbe, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x4e, 0x53, 0x10, 0xf7, 0x01,
	0x00, 0x00,
}
